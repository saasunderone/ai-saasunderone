

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?   @unique
  credits                Int       @default(10)
  accounts               Account[]
  sessions               Session[]
  chats                  Chat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserSystem {
  USER
  ASSISTANT
  
}


model Chat {
  id    String    @id @default(cuid())
  pdfName String
  pdfUrl String
  createdAt DateTime @default(now())
  userId String
  fileKey String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  content   String
  createdAt DateTime @default(now())
  role      UserSystem
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}